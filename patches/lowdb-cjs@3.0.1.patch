diff --git a/lib/adapters/TextFile.js b/lib/adapters/TextFile.js
index f026284d19e0367cba86d66139d8c023e2e8a11f..4742421f677bd3a9ba1bfb63be6187daf6f6ffca 100644
--- a/lib/adapters/TextFile.js
+++ b/lib/adapters/TextFile.js
@@ -1,43 +1,83 @@
 "use strict";
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+var __classPrivateFieldSet =
+  (this && this.__classPrivateFieldSet) ||
+  function (receiver, state, value, kind, f) {
     if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
+    if (kind === "a" && !f)
+      throw new TypeError("Private accessor was defined without a setter");
+    if (
+      typeof state === "function"
+        ? receiver !== state || !f
+        : !state.has(receiver)
+    )
+      throw new TypeError(
+        "Cannot write private member to an object whose class did not declare it"
+      );
+    return (
+      kind === "a"
+        ? f.call(receiver, value)
+        : f
+        ? (f.value = value)
+        : state.set(receiver, value),
+      value
+    );
+  };
+var __classPrivateFieldGet =
+  (this && this.__classPrivateFieldGet) ||
+  function (receiver, state, kind, f) {
+    if (kind === "a" && !f)
+      throw new TypeError("Private accessor was defined without a getter");
+    if (
+      typeof state === "function"
+        ? receiver !== state || !f
+        : !state.has(receiver)
+    )
+      throw new TypeError(
+        "Cannot read private member from an object whose class did not declare it"
+      );
+    return kind === "m"
+      ? f
+      : kind === "a"
+      ? f.call(receiver)
+      : f
+      ? f.value
+      : state.get(receiver);
+  };
 var _TextFile_filename, _TextFile_writer;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.TextFile = void 0;
 const fs_1 = require("fs");
 const steno_1 = require("../steno");
 class TextFile {
-    constructor(filename) {
-        _TextFile_filename.set(this, void 0);
-        _TextFile_writer.set(this, void 0);
-        __classPrivateFieldSet(this, _TextFile_filename, filename, "f");
-        __classPrivateFieldSet(this, _TextFile_writer, new steno_1.Writer(filename), "f");
-    }
-    async read() {
-        let data;
-        try {
-            data = await fs_1.default.promises.readFile(__classPrivateFieldGet(this, _TextFile_filename, "f"), 'utf-8');
-        }
-        catch (e) {
-            if (e.code === 'ENOENT') {
-                return null;
-            }
-            throw e;
-        }
-        return data;
-    }
-    write(str) {
-        return __classPrivateFieldGet(this, _TextFile_writer, "f").write(str);
+  constructor(filename) {
+    _TextFile_filename.set(this, void 0);
+    _TextFile_writer.set(this, void 0);
+    __classPrivateFieldSet(this, _TextFile_filename, filename, "f");
+    __classPrivateFieldSet(
+      this,
+      _TextFile_writer,
+      new steno_1.Writer(filename),
+      "f"
+    );
+  }
+  async read() {
+    let data;
+    try {
+      data = await fs_1.promises.readFile(
+        __classPrivateFieldGet(this, _TextFile_filename, "f"),
+        "utf-8"
+      );
+    } catch (e) {
+      if (e.code === "ENOENT") {
+        return null;
+      }
+      throw e;
     }
+    return data;
+  }
+  write(str) {
+    return __classPrivateFieldGet(this, _TextFile_writer, "f").write(str);
+  }
 }
 exports.TextFile = TextFile;
-_TextFile_filename = new WeakMap(), _TextFile_writer = new WeakMap();
+(_TextFile_filename = new WeakMap()), (_TextFile_writer = new WeakMap());
diff --git a/lib/adapters/TextFileSync.js b/lib/adapters/TextFileSync.js
index 4af207acbf355ff403a2e614600625540dcd6be9..4bc8c8b5dc8eedce0f9bf55156203ac7014a0a08 100644
--- a/lib/adapters/TextFileSync.js
+++ b/lib/adapters/TextFileSync.js
@@ -1,44 +1,94 @@
 "use strict";
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+var __classPrivateFieldSet =
+  (this && this.__classPrivateFieldSet) ||
+  function (receiver, state, value, kind, f) {
     if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
+    if (kind === "a" && !f)
+      throw new TypeError("Private accessor was defined without a setter");
+    if (
+      typeof state === "function"
+        ? receiver !== state || !f
+        : !state.has(receiver)
+    )
+      throw new TypeError(
+        "Cannot write private member to an object whose class did not declare it"
+      );
+    return (
+      kind === "a"
+        ? f.call(receiver, value)
+        : f
+        ? (f.value = value)
+        : state.set(receiver, value),
+      value
+    );
+  };
+var __classPrivateFieldGet =
+  (this && this.__classPrivateFieldGet) ||
+  function (receiver, state, kind, f) {
+    if (kind === "a" && !f)
+      throw new TypeError("Private accessor was defined without a getter");
+    if (
+      typeof state === "function"
+        ? receiver !== state || !f
+        : !state.has(receiver)
+    )
+      throw new TypeError(
+        "Cannot read private member from an object whose class did not declare it"
+      );
+    return kind === "m"
+      ? f
+      : kind === "a"
+      ? f.call(receiver)
+      : f
+      ? f.value
+      : state.get(receiver);
+  };
 var _TextFileSync_tempFilename, _TextFileSync_filename;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.TextFileSync = void 0;
 const fs_1 = require("fs");
 const path_1 = require("path");
 class TextFileSync {
-    constructor(filename) {
-        _TextFileSync_tempFilename.set(this, void 0);
-        _TextFileSync_filename.set(this, void 0);
-        __classPrivateFieldSet(this, _TextFileSync_filename, filename, "f");
-        __classPrivateFieldSet(this, _TextFileSync_tempFilename, path_1.default.join(path_1.default.dirname(filename), `.${path_1.default.basename(filename)}.tmp`), "f");
-    }
-    read() {
-        let data;
-        try {
-            data = fs_1.default.readFileSync(__classPrivateFieldGet(this, _TextFileSync_filename, "f"), 'utf-8');
-        }
-        catch (e) {
-            if (e.code === 'ENOENT') {
-                return null;
-            }
-            throw e;
-        }
-        return data;
-    }
-    write(str) {
-        fs_1.default.writeFileSync(__classPrivateFieldGet(this, _TextFileSync_tempFilename, "f"), str);
-        fs_1.default.renameSync(__classPrivateFieldGet(this, _TextFileSync_tempFilename, "f"), __classPrivateFieldGet(this, _TextFileSync_filename, "f"));
+  constructor(filename) {
+    _TextFileSync_tempFilename.set(this, void 0);
+    _TextFileSync_filename.set(this, void 0);
+    __classPrivateFieldSet(this, _TextFileSync_filename, filename, "f");
+    __classPrivateFieldSet(
+      this,
+      _TextFileSync_tempFilename,
+      path_1.join(
+        path_1.dirname(filename),
+        `.${path_1.basename(filename)}.tmp`
+      ),
+      "f"
+    );
+  }
+  read() {
+    let data;
+    try {
+      data = fs_1.readFileSync(
+        __classPrivateFieldGet(this, _TextFileSync_filename, "f"),
+        "utf-8"
+      );
+    } catch (e) {
+      if (e.code === "ENOENT") {
+        return null;
+      }
+      throw e;
     }
+    return data;
+  }
+  write(str) {
+    fs_1.writeFileSync(
+      __classPrivateFieldGet(this, _TextFileSync_tempFilename, "f"),
+      str
+    );
+    fs_1.renameSync(
+      __classPrivateFieldGet(this, _TextFileSync_tempFilename, "f"),
+      __classPrivateFieldGet(this, _TextFileSync_filename, "f")
+    );
+  }
 }
 exports.TextFileSync = TextFileSync;
-_TextFileSync_tempFilename = new WeakMap(), _TextFileSync_filename = new WeakMap();
+(_TextFileSync_tempFilename = new WeakMap()),
+  (_TextFileSync_filename = new WeakMap());
diff --git a/lib/steno.js b/lib/steno.js
index 092efcbdc53214939a5f6df03178a895ac2aac91..f9546ee3162019840b7059621f03f423c7ca4dc4 100644
--- a/lib/steno.js
+++ b/lib/steno.js
@@ -1,16 +1,58 @@
 "use strict";
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+var __classPrivateFieldSet =
+  (this && this.__classPrivateFieldSet) ||
+  function (receiver, state, value, kind, f) {
     if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _Writer_instances, _Writer_filename, _Writer_tempFilename, _Writer_locked, _Writer_prev, _Writer_next, _Writer_nextPromise, _Writer_nextData, _Writer_add, _Writer_write;
+    if (kind === "a" && !f)
+      throw new TypeError("Private accessor was defined without a setter");
+    if (
+      typeof state === "function"
+        ? receiver !== state || !f
+        : !state.has(receiver)
+    )
+      throw new TypeError(
+        "Cannot write private member to an object whose class did not declare it"
+      );
+    return (
+      kind === "a"
+        ? f.call(receiver, value)
+        : f
+        ? (f.value = value)
+        : state.set(receiver, value),
+      value
+    );
+  };
+var __classPrivateFieldGet =
+  (this && this.__classPrivateFieldGet) ||
+  function (receiver, state, kind, f) {
+    if (kind === "a" && !f)
+      throw new TypeError("Private accessor was defined without a getter");
+    if (
+      typeof state === "function"
+        ? receiver !== state || !f
+        : !state.has(receiver)
+    )
+      throw new TypeError(
+        "Cannot read private member from an object whose class did not declare it"
+      );
+    return kind === "m"
+      ? f
+      : kind === "a"
+      ? f.call(receiver)
+      : f
+      ? f.value
+      : state.get(receiver);
+  };
+var _Writer_instances,
+  _Writer_filename,
+  _Writer_tempFilename,
+  _Writer_locked,
+  _Writer_prev,
+  _Writer_next,
+  _Writer_nextPromise,
+  _Writer_nextData,
+  _Writer_add,
+  _Writer_write;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Writer = void 0;
 const fs_1 = require("fs");
@@ -18,68 +60,127 @@ const path_1 = require("path");
 // Returns a temporary file
 // Example: for /some/file will return /some/.file.tmp
 function getTempFilename(file) {
-    return path_1.default.join(path_1.default.dirname(file), '.' + path_1.default.basename(file) + '.tmp');
+  return path_1.join(
+    path_1.dirname(file),
+    "." + path_1.basename(file) + ".tmp"
+  );
 }
 class Writer {
-    constructor(filename) {
-        _Writer_instances.add(this);
-        _Writer_filename.set(this, void 0);
-        _Writer_tempFilename.set(this, void 0);
-        _Writer_locked.set(this, false);
-        _Writer_prev.set(this, null);
-        _Writer_next.set(this, null);
-        _Writer_nextPromise.set(this, null);
-        _Writer_nextData.set(this, null
-        // File is locked, add data for later
-        );
-        __classPrivateFieldSet(this, _Writer_filename, filename, "f");
-        __classPrivateFieldSet(this, _Writer_tempFilename, getTempFilename(filename), "f");
-    }
-    async write(data) {
-        return __classPrivateFieldGet(this, _Writer_locked, "f") ? __classPrivateFieldGet(this, _Writer_instances, "m", _Writer_add).call(this, data) : __classPrivateFieldGet(this, _Writer_instances, "m", _Writer_write).call(this, data);
-    }
+  constructor(filename) {
+    _Writer_instances.add(this);
+    _Writer_filename.set(this, void 0);
+    _Writer_tempFilename.set(this, void 0);
+    _Writer_locked.set(this, false);
+    _Writer_prev.set(this, null);
+    _Writer_next.set(this, null);
+    _Writer_nextPromise.set(this, null);
+    _Writer_nextData.set(
+      this,
+      null
+      // File is locked, add data for later
+    );
+    __classPrivateFieldSet(this, _Writer_filename, filename, "f");
+    __classPrivateFieldSet(
+      this,
+      _Writer_tempFilename,
+      getTempFilename(filename),
+      "f"
+    );
+  }
+  async write(data) {
+    return __classPrivateFieldGet(this, _Writer_locked, "f")
+      ? __classPrivateFieldGet(this, _Writer_instances, "m", _Writer_add).call(
+          this,
+          data
+        )
+      : __classPrivateFieldGet(
+          this,
+          _Writer_instances,
+          "m",
+          _Writer_write
+        ).call(this, data);
+  }
 }
 exports.Writer = Writer;
-_Writer_filename = new WeakMap(), _Writer_tempFilename = new WeakMap(), _Writer_locked = new WeakMap(), _Writer_prev = new WeakMap(), _Writer_next = new WeakMap(), _Writer_nextPromise = new WeakMap(), _Writer_nextData = new WeakMap(), _Writer_instances = new WeakSet(), _Writer_add = function _Writer_add(data) {
+(_Writer_filename = new WeakMap()),
+  (_Writer_tempFilename = new WeakMap()),
+  (_Writer_locked = new WeakMap()),
+  (_Writer_prev = new WeakMap()),
+  (_Writer_next = new WeakMap()),
+  (_Writer_nextPromise = new WeakMap()),
+  (_Writer_nextData = new WeakMap()),
+  (_Writer_instances = new WeakSet()),
+  (_Writer_add = function _Writer_add(data) {
     // Only keep most recent data
     __classPrivateFieldSet(this, _Writer_nextData, data, "f");
     // Create a singleton promise to resolve all next promises once next data is written
-    __classPrivateFieldSet(this, _Writer_nextPromise, __classPrivateFieldGet(this, _Writer_nextPromise, "f") || new Promise((resolve, reject) => {
-        __classPrivateFieldSet(this, _Writer_next, [resolve, reject], "f");
-    }), "f");
+    __classPrivateFieldSet(
+      this,
+      _Writer_nextPromise,
+      __classPrivateFieldGet(this, _Writer_nextPromise, "f") ||
+        new Promise((resolve, reject) => {
+          __classPrivateFieldSet(this, _Writer_next, [resolve, reject], "f");
+        }),
+      "f"
+    );
     // Return a promise that will resolve at the same time as next promise
     return new Promise((resolve, reject) => {
-        var _a;
-        (_a = __classPrivateFieldGet(this, _Writer_nextPromise, "f")) === null || _a === void 0 ? void 0 : _a.then(resolve).catch(reject);
+      var _a;
+      (_a = __classPrivateFieldGet(this, _Writer_nextPromise, "f")) === null ||
+      _a === void 0
+        ? void 0
+        : _a.then(resolve).catch(reject);
     });
-}, _Writer_write = 
-// File isn't locked, write data
-async function _Writer_write(data) {
-    var _a, _b;
-    // Lock file
-    __classPrivateFieldSet(this, _Writer_locked, true, "f");
-    try {
+  }),
+  (_Writer_write =
+    // File isn't locked, write data
+    async function _Writer_write(data) {
+      var _a, _b;
+      // Lock file
+      __classPrivateFieldSet(this, _Writer_locked, true, "f");
+      try {
         // Atomic write
-        await fs_1.default.promises.writeFile(__classPrivateFieldGet(this, _Writer_tempFilename, "f"), data, 'utf-8');
-        await fs_1.default.promises.rename(__classPrivateFieldGet(this, _Writer_tempFilename, "f"), __classPrivateFieldGet(this, _Writer_filename, "f"));
+        await fs_1.promises.writeFile(
+          __classPrivateFieldGet(this, _Writer_tempFilename, "f"),
+          data,
+          "utf-8"
+        );
+        await fs_1.promises.rename(
+          __classPrivateFieldGet(this, _Writer_tempFilename, "f"),
+          __classPrivateFieldGet(this, _Writer_filename, "f")
+        );
         // Call resolve
-        (_a = __classPrivateFieldGet(this, _Writer_prev, "f")) === null || _a === void 0 ? void 0 : _a[0]();
-    }
-    catch (err) {
+        (_a = __classPrivateFieldGet(this, _Writer_prev, "f")) === null ||
+        _a === void 0
+          ? void 0
+          : _a[0]();
+      } catch (err) {
         // Call reject
         // @ts-expect-error Boo
-        (_b = __classPrivateFieldGet(this, _Writer_prev, "f")) === null || _b === void 0 ? void 0 : _b[1](err);
+        (_b = __classPrivateFieldGet(this, _Writer_prev, "f")) === null ||
+        _b === void 0
+          ? void 0
+          : _b[1](err);
         throw err;
-    }
-    finally {
+      } finally {
         // Unlock file
         __classPrivateFieldSet(this, _Writer_locked, false, "f");
-        __classPrivateFieldSet(this, _Writer_prev, __classPrivateFieldGet(this, _Writer_next, "f"), "f");
-        __classPrivateFieldSet(this, _Writer_next, __classPrivateFieldSet(this, _Writer_nextPromise, null, "f"), "f");
+        __classPrivateFieldSet(
+          this,
+          _Writer_prev,
+          __classPrivateFieldGet(this, _Writer_next, "f"),
+          "f"
+        );
+        __classPrivateFieldSet(
+          this,
+          _Writer_next,
+          __classPrivateFieldSet(this, _Writer_nextPromise, null, "f"),
+          "f"
+        );
         if (__classPrivateFieldGet(this, _Writer_nextData, "f") !== null) {
-            const nextData = __classPrivateFieldGet(this, _Writer_nextData, "f");
-            __classPrivateFieldSet(this, _Writer_nextData, null, "f");
-            await this.write(nextData);
+          const nextData = __classPrivateFieldGet(this, _Writer_nextData, "f");
+          __classPrivateFieldSet(this, _Writer_nextData, null, "f");
+          await this.write(nextData);
         }
-    }
-};
+      }
+    });